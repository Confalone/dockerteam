{"version":3,"sources":["../../src/todos/routes.js"],"names":["router","express","Router","route","get","getAllTodos","returnResponse","post","createTodo","delete","clearTodos","all","getOneTodo","patch","patchTodo","deleteTodo","req","res","next","locals","todos","db","todoTable","catch","err","rows","clear","status","body","order","position","todo","create","getById","params","id","errors","NotFound","Object","assign","updatedTodo","update","deleteById","baseUrl","protocol","json"],"mappings":"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","file":"routes.js","sourcesContent":["import express from 'express';\nimport { errors } from 'express-simple-errors';\nimport transformResponse, { schema } from './model'; // eslint-disable-line no-unused-variables\nimport db from '../db';\nimport { join } from 'path';\nconst todoTable = 'todos';\n\nexport default function ()  {\n  const router = express.Router();\n\n  router.route('/')\n    .get(getAllTodos, returnResponse)\n    .post(createTodo, returnResponse)\n    .delete(clearTodos, returnResponse);\n\n  // router.get('/fun', (req, res)=> res.send(\"hello world\"))\n\n\n\n  router.route('/:id')\n    .all(getOneTodo)\n    .get(returnResponse)\n    .patch(patchTodo, returnResponse)\n    .delete(deleteTodo, returnResponse);\n\n  async function getAllTodos(req, res, next) {\n\n\n    res.locals.todos = await db.all(todoTable)\n    .catch((err) => next(err));\n    next();\n  }\n\n  async function clearTodos(req, res, next) {\n    const rows = await db.clear(todoTable)\n    .catch((err) => next(err));\n    res.locals.todos = rows;\n    res.status(204);\n    next();\n  }\n\n  async function createTodo(req, res, next) {\n    if (req.body.order) {\n      req.body.position = req.body.order;\n      delete req.body.order;\n    }\n    const todo = await db.create(todoTable, req.body)\n    .catch((err) => next(err));\n    res.locals.todo = todo[0];\n    res.status(201);\n    next();\n  }\n\n  async function getOneTodo(req, res, next) {\n    const todo = await db.getById('todos', req.params.id)\n    .catch((err) => next(err));\n    res.locals.todo = todo && todo[0];\n    if (!res.locals.todo) {\n      return next(new errors.NotFound('This todo does not exist'));\n    }\n    next();\n  }\n\n  async function patchTodo(req, res, next) {\n    const todo = Object.assign({}, res.locals.todo[0], req.body);\n    if (todo.order) {\n      todo.position = todo.order;\n      delete todo.order;\n    }\n\n    const updatedTodo = await db.update(todoTable, req.params.id, todo)\n    .catch((err) => next(err));\n    res.locals.todo = updatedTodo[0];\n    next();\n  }\n\n  async function deleteTodo(req, res, next) {\n    res.locals.todo = await db.deleteById(todoTable, req.params.id)\n    .catch((err) => next(err));\n    res.status(204);\n    next();\n  }\n\n  function returnResponse(req, res) {\n    // handle no responses here\n    res.locals.baseUrl = `${req.protocol}://${req.get('host')}`;\n    res.json(transformResponse(res.locals));\n    // res.json({foo:\"bar\"})\n  }\n\n  return router;\n}"]}